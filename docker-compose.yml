version: "3.9"
services:
  #testing producer for notify service
  #test-producer:
    #build: ./testProducer
    #container_name: test-producer
    #depends_on:
      #rabbitMq:
        #condition: service_healthy
  rabbitMq:
    image: rabbitmq:3.12.0
    container_name: rabbitMq
    volumes:
      - ./rabbitMq/data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  mysqlDb:
    image: mysql:latest
    container_name: mysqlDb
    restart: always
    volumes:
      - ./mysql/data:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_DATABASE: 'b4y_user_db'
      TZ: 'GMT-2:00'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 3s
      timeout: 30s
      retries: 10
      start_period: 3s

  neo4jDb:
    # Docker image to be used
    image: neo4j:latest

    # Hostname
    hostname: neo4jDb

    container_name: neo4jDb

    # The ports that will be accessible from outside the container - HTTP (7474) and Bolt (7687).
    ports:
      - "7474:7474"
      - "7687:7687"

    volumes:
      - ./neo4j/data:/data
      - ./plugins:/plugins


      # Passes the following environment variables to the container
    environment:
      NEO4J_AUTH : "neo4j/123456789"
      NEO4J_PLUGINS: '["apoc"]'

    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s

  notify-service:
    build: ./notify-service
    container_name: notify-service
    volumes:
      - ./notify-service:/app
    depends_on:
      rabbitMq:
        condition: service_healthy
      booking_service:
        condition: service_started

  db-service:
    build: ./db-service
    container_name: db-service
    volumes:
      - ./db-service:/app
    depends_on:
      mysqlDb:
        condition: service_healthy

  booking_service:
    build: ./booking-service
    container_name: booking_service
    volumes:
      - ./booking-service:/app
    depends_on:
      neo4jDb:
        condition: service_healthy
      rabbitMq:
        condition: service_healthy

  gateway-api:
    build: ./gateway-api
    container_name: gateway-api
    ports:
      - "50052:50052"
    volumes:
      - ./gateway-api:/app

  login-service:
    build: ./login-service
    container_name: login-service
    depends_on:
      mysqlDb:
        condition: service_healthy

  make-root-service:
    build: ./make-root-service
    container_name: make-root-service
    volumes:
      - ./make-root-service:/app
    depends_on:
      rabbitMq:
        condition: service_healthy
      node-selector-service:
        condition: service_started

  node-selector-service:
    build: ./node-selector-service
    container_name: node-selector-service
    volumes:
      - ./node-selector-service:/app
    depends_on:
      booking_service:
        condition: service_started
      ors-app:
        condition: service_started
      vroom:
        condition: service_started
      rabbitMq:
        condition: service_healthy
      neo4jDb:
        condition: service_healthy


  ors-app:
    container_name: ors-app
    ports:
      - "8080:8080"
      - "9001:9001"
    image: openrouteservice/openrouteservice:latest
    user: "${UID:-0}:${GID:-0}"
  #    build:
  #      context: ./
  #      args:
  #        ORS_CONFIG: ./ors-api/src/main/resources/ors-config-sample.json
  #        OSM_FILE: ./ors-api/src/test/files/heidelberg.osm.gz

  # Scaricare questo file e metterlo nella cartella ./ors/ http://download.geofabrik.de/europe/italy/centro-latest.osm.pbf
    volumes:
      - ./ors/graphs:/home/ors/ors-core/data/graphs
      - ./ors/elevation_cache:/home/ors/ors-core/data/elevation_cache
      - ./ors/logs/ors:/home/ors/ors-core/logs/ors
      - ./ors/logs/tomcat:/home/ors/tomcat/logs
      - ./ors/conf:/home/ors/ors-conf
      - ./ors/centro-latest.osm.pbf:/home/ors/ors-core/data/osm_file.pbf
    environment:
      - BUILD_GRAPHS=False  # Forces the container to rebuild the graphs, e.g. when PBF is changed
      - "JAVA_OPTS=-Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:ParallelGCThreads=4 -Xms1g -Xmx2g"
      - "CATALINA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9001 -Dcom.sun.management.jmxremote.rmi.port=9001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost"

  vroom:
    image: vroomvrp/vroom-docker:v1.13.0
    container_name: vroom
    volumes:
      - ./vroom/conf:/conf
    environment:
      - VROOM_ROUTER=ors
    ports:
      - "3000:3000"
    depends_on:
      ors-app:
        condition: service_started

  ors-dao:
    build: ./ors-dao
    container_name: ors-dao
    volumes:
      - ./ors-dao:/app
    depends_on:
      ors-app:
        condition: service_started

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "5000:5000"
    volumes:
      - ./frontend:/app
    depends_on:
      gateway-api:
        condition: service_started

  reccomend-service:
    build: ./reccomend-service
    container_name: reccomend-service
    volumes:
      - ./reccomend-service:/app
    depends_on:
      db-service:
        condition: service_started
#networks:
  #backend-net:
    #name: backend-net
    #external: true

